<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: "Segoe UI", "Helvetica Neue", "Arial", sans-serif;
            margin: 20px;
        }
        #inputContainer {
            display: flex;
            border: 1px solid #ccc;
            border-radius: 5px;
            overflow: hidden;
            min-width: 40px;
        }
        #lineNumbers {
            padding: 10px;
            border-right: 1px solid #ccc;
            text-align: right;
            user-select: none;
            font-family: monospace;
            font-size: 1em;
            line-height: 1.5;
            width: 40px;
            height: auto;
            overflow: auto;
        }
        #inputText {
            flex: 1;
            font-family: monospace;
            font-size: 1em;
            line-height: 1.5;
            border: none;
            padding: 10px;
            margin-top: 0;
            overflow: auto;
            resize: none;
        }
        #inputText:focus {
            outline: none;
        }
        #runCodeButton {
            position: absolute;
            top: 17em;
            right: 37em;
        }
        #outputText {
            border: 1px solid #ccc;
            padding: 10px;
            font-size: 0.9em;
            margin-top: 10px;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
<div id="inputContainer">
    <div id="lineNumbers"></div>
    <textarea id="inputText" rows="10" oninput="updateLineNumbers(); this.scrollTop = this.scrollHeight;">
.ssp [10]
.sbp [10]
.start [20]
        mov r6, 0
        mov r7, 1
        push r6
        push r7
        jmp @fib_loop
fib_loop:
        pop r0
        mov r5, 0
        pop r7
        pop r6
        add r5, r7
        add r5, r6
        mov r6, r7
        mov r7, r5
        push r6
        push r7
        jo @finish
        int 5
        jmp @fib_loop
finish:
hlt
    </textarea>
    <button id="runCodeButton">Run</button>
</div>
<pre id="outputText"></pre>

<script>
    const loadingTexts = [
        "Loading...",
        "Running...",
        "Executing...",
        "Shaving yaks...",
        "Handling OOMs...",
        "Compiling LLVM...",
        "Overflowing stacks...",
        "Generating SIGILLs...",
    ];

    function getRandomLoadingText() {
        const randomIndex = Math.floor(Math.random() * loadingTexts.length);
        return loadingTexts[randomIndex];
    }

    function updateLineNumbers() {
        const inputText = document.getElementById('inputText');
        const lineNumbers = document.getElementById('lineNumbers');
        const lines = inputText.value.split('\n').length;
        lineNumbers.innerHTML = Array.from({ length: lines }, (_, i) => i + 1).join('<br>');
    }

    document.getElementById('runCodeButton').addEventListener('click', async () => {
        const inputText = document.getElementById('inputText').value;
        const outputTextElement = document.getElementById('outputText');

        outputTextElement.textContent = getRandomLoadingText();

        try {
            const fetchPromise = fetch('https://belle-demo.vercel.app/api/runBelle', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text: inputText }),
            });

            const timeoutPromise = new Promise((_, reject) =>
                setTimeout(() => reject(new Error('Request timed out')), 10000)
            );

            const response = await Promise.race([fetchPromise, timeoutPromise]);

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.details || 'No details provided');
            }

            const data = await response.json();

            if (data && typeof data === 'object') {
                const output = data.output || 'No output available';
                outputTextElement.textContent = output;
            } else {
                outputTextElement.textContent = 'Unexpected response format';
            }

        } catch (error) {
            console.error('Fetch error:', error);
            outputTextElement.textContent = `Error: ${error.message}`;
        }
    });

    updateLineNumbers();
</script>
</body>
</html>
